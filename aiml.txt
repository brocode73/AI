5)


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize']=(20.0,10.0)

df = pd.read_csv('headbrain.csv')
df.head()

X = df['Head Size(cm^3)'].values
Y = df['Brain Weight(grams)'].values
mean_x=np.mean(X)
mean_y=np.mean(Y)
n = 0
n = len(X)

numer=0
denom=0
for i in range(n):
    numer+=(X[i]-mean_x)*(Y[i]-mean_y)
    denom+=(X[i]-mean_x)**2
m=numer/denom
c=mean_y-(m*mean_x)
print(m,c)

# Plotting Values and Regression Line
%matplotlib inline

plt.rcParams['figure.figsize'] = (10.0, 5.0)
# max_x = np.max(X) + 100
# min_x = np.min(X) - 100

y = m * X + c
print(y)

# Ploting Line
plt.plot(X, y, color='blue', label='Regression Line')
# Ploting Scatter Points
plt.scatter(X, Y, c='green', label='Scatter data')

plt.xlabel('Head Size in cm3')
plt.ylabel('Brain Weight in grams')
plt.legend()
plt.show()

rmse = 0
for i in range(n):
    y_pred = c + m * X[i]
    rmse += (Y[i] - y_pred) ** 2
    
rmse = np.sqrt(rmse/n)
print("Root Mean Square Error is",rmse)

ss_tot = 0
ss_res = 0
for i in range(n):
    y_pred = c + m * X[i]
    ss_tot += (Y[i] - mean_y) ** 2
    ss_res += (Y[i] - y_pred) ** 2
r2 = 1 - (ss_res/ss_tot)
print("R2 Score",r2)

x_new = np.array([4512])
y_new = m * x_new + c
print(y_new)
      



2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df = pd.read_csv('headbrain.csv')

df.head()

X=df['Head Size(cm^3)'].values
Y = df['Brain Weight(grams)'].values

print("X = ",X)
print("Y = ",Y)

n = len(X)

X = X.reshape(n,1)
lr = LinearRegression()
lr = lr.fit(X,Y)
Y_pred = lr.predict(X)

print("X = ",X)
print("Y Predicted = ",Y_pred)

%matplotlib inline
import pandas as pd

X_prev=pd.DataFrame(X)
plt.rcParams['figure.figsize'] = (10.0, 5.0)

# Ploting Line
plt.plot(X, Y_pred, color='blue', label='Regression Line')
# Ploting Scatter Points
plt.scatter(X_prev, Y, c='green', label='Scatter data')

plt.xlabel('Head Size in cm3')
plt.ylabel('Brain Weight in grams')
plt.legend()
plt.show()

#Calculating RMSE
mse=mean_squared_error(Y,Y_pred)
rmse=np.sqrt(mse)
r2_score=lr.score(X,Y)

print(rmse)
print(r2_score)

#Predicting for a new value
X_new = np.array([4520]).reshape(-1, 1)
lr.predict(X_new)

#Predicting for a new values
X_new = np.array([4520, 2345]).reshape(-1, 1)
lr.predict(X_new)


3

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize']=(20.0,10.0)

df = pd.read_csv('hprice.csv')
df.head()

X = df['total_sqft_int'].values
Y = df['price'].values
mean_x=np.mean(X)
mean_y=np.mean(Y)
n = len(X)

numer=0
denom=0
for i in range(n):
    numer+=(X[i]-mean_x)*(Y[i]-mean_y)
    denom+=(X[i]-mean_x)**2
m=numer/denom
c=mean_y-(m*mean_x)
print(m,c)

# Plotting Values and Regression Line
%matplotlib inline

plt.rcParams['figure.figsize'] = (10.0, 5.0)
# max_x = np.max(X) + 100
# min_x = np.min(X) - 100

y = m * X + c
print(y)

# Ploting Line
plt.plot(X, y, color='blue', label='Regression Line')
# Ploting Scatter Points
plt.scatter(X, Y, c='green', label='Scatter data')

plt.xlabel('Total Sqare Feet')
plt.ylabel('Price')
plt.legend()
plt.show()

rmse = 0
for i in range(n):
    y_pred = c + m * X[i]
    rmse += (Y[i] - y_pred) ** 2
    
rmse = np.sqrt(rmse/n)
print("Root Mean Square Error is",rmse)

ss_tot = 0
ss_res = 0
for i in range(n):
    y_pred = c + m * X[i]
    ss_tot += (Y[i] - mean_y) ** 2
    ss_res += (Y[i] - y_pred) ** 2
r2 = 1 - (ss_res/ss_tot)
print("R2 Score",r2)

#Predicting for a new value
X_new = np.array([3694]).reshape(-1, 1)
y_new = m * X_new + c
print(y_new)




4
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df = pd.read_csv('hprice.csv')
df1 = pd.read_csv('hprice.csv')
df.head()

X=df['total_sqft_int'].values
Y = df['price'].values
n = len(X)
n = int(0.75 * n)
df = pd.read_csv('hprice.csv',nrows = n)

print("X = ",X) 
print("Y = ",Y)

X = df['total_sqft_int'].values
Y = df['price'].values

X = X.reshape(n,1)
lr = LinearRegression()
lr = lr.fit(X,Y)
Y_pred = lr.predict(X)

print("X = ",X)
print("Y Predicted = ",Y_pred)

%matplotlib inline
import pandas as pd

X_prev=pd.DataFrame(X)
plt.rcParams['figure.figsize'] = (10.0, 5.0)

# Ploting Line
plt.plot(X, Y_pred, color='blue', label='Regression Line')
# Ploting Scatter Points
plt.scatter(X_prev, Y, c='green', label='Scatter data')

plt.xlabel('Total Sqaure Feet')
plt.ylabel('Price')
plt.legend()
plt.show()

#Calculating RMSE
mse=mean_squared_error(Y,Y_pred)
rmse=np.sqrt(mse)
r2_score=lr.score(X,Y)

print(rmse)
print(r2_score)

#Predicting for a new value
X_new = np.array([4520]).reshape(-1, 1)
lr.predict(X_new)

#Predicting for a new values
X_new = np.array([4520, 2345, 1574]).reshape(-1, 1)
lr.predict(X_new)









6 1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('MyData.csv')
df.head()

X = df.drop('Y', axis = 1)

X.insert(0,'B0',[1,1,1,1,1,1])

X = X.values
Y = df['Y'].values

Xt = X.T

Xt 

XtX = Xt.dot(X)

print(XtX)

XtXInv = np.linalg.inv(XtX)

print(XtXInv)

Xty = Xt.dot(Y)

print(Xty)

B = XtXInv.dot(Xty)

print(B)

X1 = 50
X2 = 70
X3 = 80
y = B[0] + B[1] * X1 + B[2] * X2 + B[3] * X3

print(y)

X1 = 30
X2 = 40
X3 = 50
y = B[0] + B[1] * X1 + B[2] * X2 + B[3] * X3

print(y)




6 2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('HPriceData.csv')
df.head()

import math
med=math.floor(df['Bedrooms'].median())
print(med)
df['Bedrooms'].fillna(med, inplace=True)
df.head()

X = df.drop('Price',axis = 1)
Y = df['Price']
print("X\n",X,"\nY\n",Y)

X.insert(0,'B0',[1,1,1,1,1])

X

Xt = X.T

Xt

XtX = Xt.dot(X)

print(XtX)

XtXInv = np.linalg.inv(XtX)

print(XtXInv)

Xty = Xt.dot(Y)

print(Xty)

BHAT = XtXInv.dot(Xty)

print(BHAT)

X1 = 3000
X2 = 3
X3 = 40
y = BHAT[0] + BHAT[1] * X1 + BHAT[2] * X2 + BHAT[3] * X3

print(y)

X1 = 2500
X2 = 4
X3 = 5
y = BHAT[0] + BHAT[1] * X1 + BHAT[2] * X2 + BHAT[3] * X3

print(y)





63
import pandas as pd
import numpy as np
from sklearn import linear_model

df=pd.read_csv('HPriceData.csv')
print(df)

import math
med=math.floor(df['Bedrooms'].median())
print(med)
df['Bedrooms'].fillna(med, inplace=True)
print(df['Bedrooms'])

lr=linear_model.LinearRegression()
x_train=df.drop('Price',axis=1)
print('x_train\n', x_train)
y_train=df['Price']
print('y_train\n',y_train)
lr.fit(x_train,y_train)

print(lr.coef_)

print(lr.intercept_)

lr.predict([[3000, 3, 40]])

lr.predict([[2500, 4, 5]])

   


6 4
import pandas as pd
import numpy as np
from sklearn import linear_model

df=pd.read_csv('hiring.csv')
print(df)



map={'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'ten':10,'eleven':11}
target_feature='experience'
df[target_feature]=df[target_feature].map(map)

print(df)


df['experience']=df['experience'].fillna(0)
print(df)



import math
med=math.floor(df['test_score(out of 10)'].mean())
print(med)
df['test_score(out of 10)'].fillna(med, inplace=True)
print(df['test_score(out of 10)'])

lr=linear_model.LinearRegression()
x_train=df.drop('salary($)',axis=1)
print('x_train\n', x_train)
y_train=df['salary($)']
print('y_train\n',y_train)
lr.fit(x_train,y_train)

print(lr.coef_)

print(lr.intercept_)

lr.predict([[2, 9, 6]])

lr.predict([[12, 10, 10]])


7 1
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

np.random.seed(0)
xx = 2 - 3 * np.random.normal(0, 1, 20)
yy = xx - 2 * (xx ** 2) + 0.5 * (xx ** 3) + np.random.normal(-3, 3, 20)
plt.scatter(xx,yy, s=10)
plt.show()
xx.sort()
yy.sort()

print(xx)

yy

x = pd.DataFrame(xx, columns =['X'])

x

x.insert(0,'x0',[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])

x

x2 = []
    

for i in range(len(x)):
    x22 = x['X'][i]**2
    x2.append(x22)
x2

x.insert(2,'x2',x2)

x

y = pd.DataFrame(yy, columns =['Y'])

y

xtrans = x.T

xtrans

xtransx = xtrans.dot(x)

import numpy as np
xtransxinv = np.linalg.inv(xtransx)

xx1 = xtransxinv.dot(xtrans)

bteeta = xx1.dot(y)

bteeta

b0 = bteeta[0]
b1 = bteeta[1]
b2 = bteeta[2]

b2

xx2 = xx**2
print(xx)
print(xx2)

import matplotlib.pyplot as plt
%matplotlib inline

plt.rcParams['figure.figsize'] = (10.0, 5.0)


Y = b0 + b1*xx + b2*xx2



plt.plot(xx, Y, color='blue', label='Regression Line')

plt.scatter(xx, yy, c='green', label='Scatter data')

plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()

Y

xx

xx=-4.38
xx2 = -4.38**2
Y = b0 + b1*xx + b2*xx2

7 2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

np.random.seed(0)
xx = 2 - 3 * np.random.normal(0, 1, 20)
yy = xx - 2 * (xx ** 2) + 0.5 * (xx ** 3) + np.random.normal(-3, 3, 20)
plt.scatter(xx,yy, s=10)
plt.show()

xx

yy

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=2, include_bias=False)

poly_features = poly.fit_transform(xx.reshape(-1, 1))

from sklearn.linear_model import LinearRegression


poly_reg_model = LinearRegression()

poly_reg_model.fit(poly_features, yy)

y_predicted = poly_reg_model.predict(poly_features)

y_predicted

plt.figure(figsize=(10, 6))
plt.title("Your first polynomial regression â€“ congrats! :)", size=16)
plt.scatter(xx, yy)
plt.plot(xx, y_predicted, c="red")
plt.show()

y

xx

yy

y_predicted

poly_reg_model.predict([[3,9]])

xx






import numpy as np
import math 
import pandas as pd
df=pd.read_csv('PlayTennis.csv')
print(df)

outlook=df['Outlook'].tolist()
temp=df['Temperature'].tolist()
humidity=df['Humidity'].tolist()
wind=df['Wind'].tolist()
play=df['Play Tennis'].tolist()

totoutlookraws=len(outlook)

totyes = totno = 0

for i in play:
    if i == 'Yes':
        totyes += 1
    elif i == 'No':
        totno += 1
print("\nyes is:\n",totyes)
print("\nNo is:\n",totno)


totyesno=totyes+totno
print("\nTotal yes and no count is:\n",totyesno)

entropy=-((totyes/totyesno)*math.log2(totyes/totyesno))-((totno/totyesno)*math.log2(totno/totyesno))
print("\nEntropy:\n",entropy)

sunnyyes = sunnyno = overyes = overno = rainyes = rainno = 0


for i,j in zip(outlook,play):
     if i=="Sunny" and j=="Yes":
         sunnyyes += 1
     elif i=="Sunny" and j=="No":
         sunnyno += 1
     elif i=="Overcast" and j=="Yes":
         overyes += 1
     elif i=="Overcast" and j=="No":
         overno += 1
     elif i=="Rain" and j=="Yes":
         rainyes += 1
     elif i=="Rain" and j=="No":
         rainno += 1
print("\nsunny yes:\t",sunnyyes,"\nsunny no:\t",sunnyno,"\novercast yes:\t",overyes,"\novercast no:\t",overno,"\nrain yes:\t",rainyes,"\nrain no:\t",rainno)

totsunny = sunnyyes + sunnyno
totovercast = overyes + overno

totrain = rainyes + rainno 
print("\nTotal sunny:\t",totsunny,"\nTotal overcast:\t",totovercast,"\nTotal rain:\t",totrain)


if totsunny == sunnyyes or totsunny == sunnyno:
    sunnyentropy = 0
else:
    sunnyentropy = -((sunnyyes/totsunny)*math.log2(sunnyyes/totsunny))-((sunnyno/totsunny)*math.log2(sunnyno/totsunny))

print("\nSunny Entropy:\n",sunnyentropy)


if totovercast == overyes or totovercast == overno:
    overcastentropy = 0
else:
    overcastentropy = -((overyes/totovercast)*math.log2(overyes/totovercast))-((overno/totovercast)*math.log2(overno/totovercast))
print("\nOvercast Entropy:\n",overcastentropy)


if totrain == rainyes or totrain == rainno:
    rainentropy = 0
else:
    rainentropy = -((rainyes/totrain)*math.log2(rainyes/totrain))-((rainno/totrain)*math.log2(rainno/totrain))
print("\nRain Entropy:\n",rainentropy)

gainoutlook=entropy-(totsunny/totyesno)*sunnyentropy-(totovercast/totyesno)*overcastentropy-(totrain/totyesno)*rainentropy
print("\nOutlook Gain is:\t",gainoutlook)

print("\n---------------------Temperature-----------------------\n")
#temperature
tottemprows=len(temp)

for i,j in zip(temp,play):
     if i=="Hot" and j=="Yes":
         hotyes += 1
     elif i=="Hot" and j=="No":
         hotno += 1
     elif i=="Mild" and j=="Yes":
         mildyes += 1
     elif i=="Mild" and j=="No":
         mildno += 1
     elif i=="Cool" and j=="Yes":
         coolyes += 1
     elif i=="Cool" and j=="No":
         coolno += 1
print("\nHot yes:\t",hotyes,"\nHot no:\t",hotno,"\nMild yes:\t",mildyes,"\nMild no:\t",mildno,"\nCool yes:\t",coolyes,"\nCool no:\t",coolno)

tothot = hotyes + hotno
totcool = coolyes + coolno
totmild = mildyes + mildno 
print("\nTotal hot:\t",tothot,"\nTotal cool:\t",totcool,"\nTotal mild:\t",totmild)

if tothot == hotyes or tothot == hotno:
    hotentropy = 0
else:
    hotentropy = -((hotyes/tothot)*math.log2(hotyes/tothot))-((hotno/tothot)*math.log2(hotno/tothot))


print("\nHot Entropy:\n",hotentropy)

if totcool == coolyes or totcool == coolno:
    coolentropy = 0
else:
    coolentropy = -((coolyes/totcool)*math.log2(coolyes/totcool))-((coolno/totcool)*math.log2(coolno/totcool))
print("\nCool Entropy:\n",coolentropy)


if totmild == mildyes or totmild == mildno:
    mildentropy = 0
else:
    mildentropy = -((mildyes/totmild)*math.log2(mildyes/totmild))-((mildno/totmild)*math.log2(mildno/totmild))
print("\nMild Entropy:\n",mildentropy)

gaintemp=entropy-(tothot/totyesno)*hotentropy-(totcool/totyesno)*coolentropy-(totmild/totyesno)*mildentropy
print("\nTemperature Gain is:\t",gaintemp)

print("\n---------------------Humidity-----------------------\n")
#humidity
highyes = highno = normalyes = normalno = 0

for i,j in zip(humidity,play):
     if i=="High" and j=="Yes":
         highyes += 1
     elif i=="High" and j=="No":
         highno += 1
     elif i=="Normal" and j=="Yes":
         normalyes += 1
     elif i=="Normal" and j=="No":
         normalno += 1
print("\nHigh yes:\t",highyes,"\nHigh no:\t",highno,"\nNormal yes:\t",normalyes,"\nNormal no:\t",normalno)



tothigh = highyes + highno
totnormal = normalyes + normalno
print("\nTotal high:\t",tothigh,"\nTotal normal:\t",totnormal)

if tothigh == highyes or tothigh == highno:
    highentropy = 0
else:
    highentropy = -((highyes/tothigh)*math.log2(highyes/tothigh))-((highno/tothigh)*math.log2(highno/tothigh))

print("\nHot Entropy:\n",highentropy)


if totnormal == normalyes or totnormal == normalno:
    normalentropy = 0
else:
    normalentropy = -((normalyes/totnormal)*math.log2(normalyes/totnormal))-((normalno/totnormal)*math.log2(normalno/totnormal))
print("\nCool Entropy:\n",normalentropy)

gainhumid=entropy-(tothigh/totyesno)*highentropy-(totnormal/totyesno)*normalentropy
print("\nHumidity Gain is:\t",gainhumid)

print("\n---------------------Wind-----------------------\n")
#humidity
weakyes = weakno = strongyes = strongno = 0

for i,j in zip(wind,play):
     if i=="Weak" and j=="Yes":
         weakyes += 1
     elif i=="Weak" and j=="No":
         weakno += 1
     elif i=="Strong" and j=="Yes":
         strongyes += 1
     elif i=="Strong" and j=="No":
         strongno += 1
print("\nStrong yes:\t",strongyes,"\nStrong no:\t",strongno,"\nWeak yes:\t",weakyes,"\nWeak no:\t",weakno)

tothigh = highyes + highno
totnormal = normalyes + normalno
print("\nTotal high:\t",tothigh,"\nTotal normal:\t",totnormal)


if tothigh == highyes or tothigh == highno:
    highentropy = 0
else:
    highentropy = -((highyes/tothigh)*math.log2(highyes/tothigh))-((highno/tothigh)*math.log2(highno/tothigh))

print("\nHigh Entropy:\n",highentropy)


if totnormal == normalyes or totnormal == normalno:
    normalentropy = 0
else:
    normalentropy = -((normalyes/totnormal)*math.log2(normalyes/totnormal))-((normalno/totnormal)*math.log2(normalno/totnormal))
print("\nNormal Entropy:\n",normalentropy)

gainhumid=entropy-(tothigh/totyesno)*highentropy-(totnormal/totyesno)*normalentropy
print("\nHumidity Gain is:\t",gainhumid)





































